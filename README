#ObjectCraft Minecraft Server

###Status
The Project is in it’s very early stages, I mainly added it to my public github repositories to let other people work on this project with me.
It is not useable in the current state for **ANY** end-user.

###Goal
The goal is to provide a full featured Minecraft Server written in Objective-C that conforms to both the Minecraft-PC Network Protocol and the Minecraft-PE (Pocket Edition) Protocol. Differences like non existing blocks, or different dimensions will get simulated for the other system as good as possible or substituted with other existing features (like sending different existing blockIds for non-existent blocks of the other protocol). No features shall be unaccessible from one client type. They might be just more complicated to use.

###Dependencies
The Project is build upon the excellent ObjFW ( http://github.com/Midar/objfw ), that is compatible with most POSIX-compatible systems. ObjectCraft requires forwarding to be supported by ObjFW on your system and clang as compiler (recommend at-least version 3.4, older versions are not supported). It also requires a libdispatch implementation available on your system (no matter if kernel-based or userland) as well as zlib. Tested systems are MacOS and Ubuntu-Linux at the time, Windows should follow once wclang errors are sorted out. iOS and Android-compatibility will be provided at a later stage, when the server is more optimized.
Objective-C 2.0 features used are Fast-Iteration and Properties. Blocks are allowed and used for libdispatch, which is the reason for the clang requirement. The new Literals introduced with clang are supported with most clang installations, but each developer is ask not to use it in production code for maximum compatibility. Auto-Synthesizing of Properties is also not allowed. Each property needs to be synthesized or for a custmo(-runtime)-implementation marked with @dynamic.

###Building

####Install ObjFW
You need to have an install of the ObjFW library, building with clang is required for using the Block API's. Currently the most recent version (0.7.1) does not include all features needed by this project (especially the OFUDPSocket), so you need to check out the lastest tarball from the git repository.

For building from git you need autotools installed, then do:
```
bash autogen.sh
./configure
make
make install
```

'objfw-config' (comes with an install of ObjFW) needs to be available at your path to automatically figure our needed flags and libraries, so the last 'make install' is required to get a usable objectCraft executable.
Support for compiling against a statically linked ObjFW library will follow later.

####Compiling ObjectCraft
If you check out the latest release via git (currently the only way until something usable can be build), you need to have autotools installed.

Compiling then should work via:
```
bash autogen.sh
./configure
make
```

Which should result in an 'objectCraft' executable.

#####Compiling on Windows
#Compiling on Windows is currently broken as ObjFW does not compile using wclang right now(!)

Compiling for Windows will be possible via MingW64 + wclang on any unix system (compiling on windows is currently not tested and supported, but may work if you get clang to work without using gcc as linker).
As long as both are setup correctly building should be as easy as:

64-Bit:
```
bash autogen.sh
CC=w64-clang CXX=w64-clang++ OBJC=w64-clang OBJCXX=w64-clang++ ./configure --host=x86_64-w64-mingw32
make
```

32-Bit:
```
bash autogen.sh
CC=w32-clang CXX=w32-clang++ OBJC=w32-clang OBJCXX=w32-clang++ ./configure --host=i686-w64-mingw32
make
```

####XCode Support
Lets face it, most Objective-C developers are mac users, including me. Thats why this project contains a useable Xcode Project file, that allows building through the Xcode build system as well as with autotools from the IDE. When building with autotools, currently all build are done with --enable-debug flag. To get a performant build, please build manually, like described above.

If you make changes to the Xcode Project that involve adding or removing source code files, please do not forget to update the Makefile.am and run autogen.sh (Xcode does not do that for you). In general when committing to this repository always make sure the gnu build system still works.
The Xcode Project is optional, as not every developer might use Xcode. I will try to fix it asap, if a foreign patch is added to the repo. But don’t rely on its functionally neither break it, if not necessary and do not change the default build flags when commit to this repo, but only locally.
